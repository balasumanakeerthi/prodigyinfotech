<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: green; /* Background color green */
            margin: 0;
            font-family: Arial, sans-serif;
        }

        .container {
            text-align: center;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            margin-bottom: 20px;
        }

        .cell {
            width: 100px;
            height: 100px;
            background-color: white; /* Cell color white */
            color: black; /* Text color black */
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            cursor: pointer;
            border: 2px solid #333;
        }

        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            margin: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tic-Tac-Toe</h1>
        <div class="board" id="board">
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
        </div>
        <button id="restartButton">Restart Game</button>
        <button id="aiButton">Play Against AI</button>
    </div>
    <script>
        const X_CLASS = 'x';
        const O_CLASS = 'o';
        const WINNING_COMBINATIONS = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6]
        ];

        const cellElements = document.querySelectorAll('[data-cell]');
        const board = document.getElementById('board');
        const restartButton = document.getElementById('restartButton');
        const aiButton = document.getElementById('aiButton');
        let oTurn;

        startGame();

        restartButton.addEventListener('click', startGame);
        aiButton.addEventListener('click', startAiGame);

        function startGame() {
            oTurn = false;
            cellElements.forEach(cell => {
                cell.classList.remove(X_CLASS);
                cell.classList.remove(O_CLASS);
                cell.textContent = ''; // Clear text content
                cell.removeEventListener('click', handleClick);
                cell.addEventListener('click', handleClick, { once: true });
            });
        }

        function handleClick(e) {
            const cell = e.target;
            const currentClass = oTurn ? O_CLASS : X_CLASS;
            const currentPlayer = oTurn ? 'O' : 'X';
            placeMark(cell, currentClass, currentPlayer);
            if (checkWin(currentClass)) {
                endGame(false);
            } else if (isDraw()) {
                endGame(true);
            } else {
                swapTurns();
            }
        }

        function endGame(draw) {
            if (draw) {
                alert("Draw!");
            } else {
                alert(`${oTurn ? "O's" : "X's"} Wins!`);
            }
            startGame();
        }

        function isDraw() {
            return [...cellElements].every(cell => {
                return cell.classList.contains(X_CLASS) || cell.classList.contains(O_CLASS);
            });
        }

        function placeMark(cell, currentClass, currentPlayer) {
            cell.classList.add(currentClass);
            cell.textContent = currentPlayer; // Display the current player ('X' or 'O')
        }

        function swapTurns() {
            oTurn = !oTurn;
        }

        function checkWin(currentClass) {
            return WINNING_COMBINATIONS.some(combination => {
                return combination.every(index => {
                    return cellElements[index].classList.contains(currentClass);
                });
            });
        }

        function startAiGame() {
            startGame();
            oTurn = false; // Player starts first
            cellElements.forEach(cell => {
                cell.removeEventListener('click', handleClick);
                cell.addEventListener('click', handlePlayerMove, { once: true });
            });
        }

        function handlePlayerMove(e) {
            const cell = e.target;
            const currentClass = X_CLASS;
            const currentPlayer = 'X';
            placeMark(cell, currentClass, currentPlayer);
            if (checkWin(currentClass)) {
                endGame(false);
            } else if (isDraw()) {
                endGame(true);
            } else {
                setTimeout(() => {
                    handleAiMove();
                }, 500);
            }
        }

        function handleAiMove() {
            const availableCells = [...cellElements].filter(cell => !cell.classList.contains(X_CLASS) && !cell.classList.contains(O_CLASS));
            const randomCell = availableCells[Math.floor(Math.random() * availableCells.length)];
            const currentClass = O_CLASS;
            const currentPlayer = 'O';
            placeMark(randomCell, currentClass, currentPlayer);
            if (checkWin(O_CLASS)) {
                endGame(false);
            } else if (isDraw()) {
                endGame(true);
            }
        }
    </script>
</body>
</html>
